""\nProperty Inquiry Agent for handling real estate queries.\n"""\nfrom typing import Dict, List, Optional, Any\nfrom pydantic import BaseModel, Field\nfrom langchain.agents import AgentExecutor, create_structured_chat_agent\nfrom langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder\nfrom langchain_core.messages import AIMessage, HumanMessage, SystemMessage\nfrom langchain_openai import ChatOpenAI\n\nfrom real_estate_ai.db.client import DatabaseClient\n\n\nclass PropertySearchParameters(BaseModel):\n    """Parameters for property search."""\n    \n    location: Optional[str] = Field(\n        None,\n        description="The city or district where the property is located, e.g., 'New Cairo' or 'Maadi'"\n    )\n    property_type: Optional[str] = Field(\n        None,\n        description="Type of property, e.g., 'apartment', 'villa', 'townhouse', 'duplex'"\n    )\n    min_bedrooms: Optional[int] = Field(\n        None,\n        description="Minimum number of bedrooms, e.g., 2"\n    )\n    max_bedrooms: Optional[int] = Field(\n        None,\n        description="Maximum number of bedrooms, e.g., 4"\n    )\n    min_price: Optional[float] = Field(\n        None,\n        description="Minimum price in EGP, e.g., 1000000"\n    )\n    max_price: Optional[float] = Field(\n        None,\n        description="Maximum price in EGP, e.g., 5000000"\n    )\n    amenities: Optional[List[str]] = Field(\n        None,\n        description="List of desired amenities, e.g., ['swimming pool', 'gym']"\n    )\n\n\nclass PropertyInquiryAgent:\n    """Agent for handling property inquiries."""\n    \n    def __init__(self, model_name: str = "gpt-4"):\n        """Initialize the agent with a language model."""\n        self.llm = ChatOpenAI(model=model_name, temperature=0)\n        self.db = DatabaseClient()\n        self.agent = self._create_agent()\n    \n    def _create_agent(self):\n        """Create the property inquiry agent."""\n        system_prompt = """\n        You are a helpful real estate assistant for properties in Egypt. \n        Your role is to help users find properties that match their criteria.\n        \n        Guidelines:\n        - Be friendly and professional\n        - Ask clarifying questions if the user's request is ambiguous\n        - Present property information in a clear, organized manner\n        - Include relevant details like price, location, size, and amenities\n        - If no properties match the criteria, suggest adjusting the search parameters\n        - Always mention the currency (EGP) when discussing prices\n        - For location queries, consider both city and district fields\n        """\n        \n        prompt = ChatPromptTemplate.from_messages([\n            ("system", system_prompt),\n            ("human", "{input}"),\n            MessagesPlaceholder(variable_name="agent_scratchpad"),\n        ])\n        \n        tools = [self._create_property_search_tool()]\n        \n        agent = create_structured_chat_agent(\n            llm=self.llm,\n            tools=tools,\n            prompt=prompt\n        )\n        \n        return AgentExecutor(\n            agent=agent,\n            tools=tools,\n            verbose=True,\n            handle_parsing_errors=True\n        )\n    \n    def _create_property_search_tool(self):\n        """Create a tool for searching properties in the database."""\n        from langchain.tools import tool\n        \n        @tool(args_schema=PropertySearchParameters)\n        def search_properties(**kwargs) -> str:\n            """Search for properties based on criteria."""\n            # Clean up the kwargs\n            filters = {k: v for k, v in kwargs.items() if v is not None and v != ""}\n            \n            # Map parameter names to database field names\n            field_mapping = {\n                "location": "district",  # Search in district field\n                "property_type": "property_type",\n                "min_bedrooms": "bedrooms_gte",\n                "max_bedrooms": "bedrooms_lte",\n                "min_price": "price_gte",\n                "max_price": "price_lte",\n                "amenities": "amenities"\n            }\n            \n            # Apply field mapping\n            db_filters = {}\n            for param, value in filters.items():  \n                if param in field_mapping:\n                    db_filters[field_mapping[param]] = value\n            \n            # Special handling for location search (search in both city and district)\n            if "location" in filters:\n                location = filters["location"]\n                properties = self.db.client.table('properties')\\n                    .select('*')\\n                    .or_(f"district.ilike.%{location}%,city.ilike.%{location}%")\\n                    .execute()\n                return properties.data\n            \n            # Execute the query with filters\n            properties = self.db.get_properties(**db_filters)\n            return properties\n        \n        return search_properties\n    \n    def answer_query(self, query: str) -> str:\n        """\n        Process a property inquiry and return a response.\n        \n        Args:\n            query: The user's property inquiry\n            \n        Returns:\n            str: The agent's response to the query\n        """\n        try:\n            result = self.agent.invoke({"input": query})\n            return result["output"]\n        except Exception as e:\n            return f"An error occurred while processing your request: {str(e)}"\n\n\n# Example usage\nif __name__ == "__main__":\n    import os\n    from dotenv import load_dotenv\n    \n    load_dotenv()\n    \n    agent = PropertyInquiryAgent()\n    \n    # Example queries to test\n    test_queries = [\n        "Show me 2-bedroom apartments in New Cairo under 5M EGP",\n        "What villas do you have with a pool?",\n        "Find me a 3-bedroom property in Maadi"\n    ]\n    \n    for query in test_queries:\n        print(f"\nQ: {query}")\n        response = agent.answer_query(query)\n        print(f"A: {response}")
